#!/bin/sh
pwd="$(pwd)"
die() {
    echo "$1" >&2
    exit 1
}

confirm() {
    clear
    while true; do
      printf "\nDo you want to continue [y/n]\nChoice:  " 
        read -r yn
        case $yn in
            [Yy]*) return 0  ;;  
            [Nn]*) printf "\nAborted\n" ; die ;;
        esac
    done
}


getos() {
  cat /bedrock/etc/bedrock-release >/dev/null && distro=bedrock && echo "${distro}" && return 0 
    for distro in apt xbps-install pacman-key ; do
        if command -v "${distro}" > /dev/null; then 
          echo "${distro}"
          break
        fi
    done
}
distro=$(getos)
checkdep() {
    clear
    printf "If you are on Void/Arch Linux the script can install dependencies for you\nDo you want to install the dependencies? [y/n]\n\n"
    printf "Choice: "
    read -r yn
    case "${yn}" in
        [Yy]*)
          case "${distro}" in
            "bedrock")
              clear
              printf "Bedrock Installation Detected\nEnter your preferred way of installing dependencies\nThis will set the variable to selected distro\n"
              printf "\nCurrent Supported Stratas-:\n"
              printf "\n1.) Void-Linux\n\n2.) Arch-Linux\n\n\nChoice:  "
              read -r distans
                case "${distans}" in
                  "Void-Linux")
                    distro="xbps-install"
                    ;;
                  "Arch-Linux")
                    distro="pacman-key"
                    ;;
                  *)
                    die "\nYour Distro is not supported yet :(\n"
                esac
                checkdep
              ;;
            "xbps-install")
              printf "Installing all the dependencies for Void Linux:\n"
              sudo xbps-install -Svu;
              sudo xbps-install -S zsh make libXft curl nodejs gcc pkg-config \
              libX11-devel libXft-devel libXinerama-devel picom polybar \
              dunst bc rofi mpv maim youtube-dl xprop stow ranger nerd-fonts-ttf \
              nerd-fonts-otf pywal xrdb feh git bspwm || die "Dependencies were not installed"
              ;;

            
            "pacman-key")
              printf "Installing all the dependencies for Arch Linux:\n"
              sudo pacman -Syu ;
              sudo pacman -S zsh make libxft curl nodejs gcc pkgconf \
                   libX11 libxinerama picom dunst bc rofi mpv maim \
                   mpv youtube-dl xorg-xprop stow ranger python-pywal \
                   xorg-xrdb feh git bspwm || die "Dependencies were not installed"
              git clone https://aur.archlinux.org/yay.git
              cd yay
              makepkg -si
              cd ..
              rm -rf yay
              yay -S polybar nerd-fonts-complete
              ;;
            
            *)
              printf "\nError: The script doesn't support your distro\n" && die
            
          esac

            sudo chsh -s $(which zsh) 
            sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
            rm $HOME/.zshrc
            curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
                    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
            ;;
        [Nn]*)
            clear
            printf "A file named dependencies is in the repo check it for all the dependencies.txt"
            printf "\nHave you installed all the dependencies manually? [y/n]\nChoice:  "
            read -r yn
            case $yn in
                [Yy]*) return 0 ;;
                [Nn]*) printf "Aborted\n" ; die ;;
            esac
            ;;
    esac
}

settheme() {
    cd ${pwd}
    xrdb -remove
    xrdb "$HOME"/xrdb/"$1"/"$1" 
    feh --bg-fill "$HOME"/Wallpapers/"$1".*
    
}

stoww() {
    cd "${pwd}"
    stow Wallpapers -t "$HOME"
    stow xrdb -t "$HOME"
    stow bin -t "$HOME"
}

unstow() {
    cd "${pwd}"
    stow -D Wallpapers
    stow -D xrdb
    stow -D bin
    stow -D Bspwm:lake
    stow -D Bspwm:forest
    stow -D Bspwm:pywal
    stow -D Dwm:girl
}

suckless() {
    clear
    printf "\n Do you want to install my Suckless Programs? [dwm, st, tabbed, All]\n"
    printf "Type 'exit' if you don't want my Suckless Programs\n"
    printf "\n Type the programs one at a time\n\nChoice:  "
    read -r answer 
    while [ "$answer" != "exit" ]; do
        case $answer in
            dwm | st | tabbed)
                [ "$answer" = "st" ] && st="true"
                [ "$answer" = "tabbed" ] && tabbed="true"
                cd $HOME
                git clone https://gitlab.com/Tanish2002/$answer-tanish2002
                cd $answer-tanish2002
                sudo make clean install
                [ "$answer" = "dwm" ] && sudo cp dwm.desktop /usr/share/xsessions/
                clear
                printf "\n Next Program? [dwm ,st ,tabbed]\n"
                printf "\n Type:'exit' when you have installed the programs you need\nChoice:  "
                read -r answer 
                ;;
            ALL)
                cd $HOME
                git clone https://gitlab.com/Tanish2002/dwm-tanish2002
                git clone https://gitlab.com/Tanish2002/st-tanish2002
                git clone https://gitlab.com/Tanish2002/tabbed-tanish2002
                cd dwm-tanish2002 && sudo make install && sudo cp dwm.desktop /usr/share/xsessions/ && cd .. 
                cd st-tanish2002 && sudo make install && cd ..
                cd tabbed-tanish2002 && sudo make install && cd ..
                st="true" && tabbed="true"
                break
                ;;
            *)
                printf "\nI don't have suckless program with that name :)\n" 
                printf "Do you want to retry?[y/n]\nChoice:  " 
                read -r yn 
                case $yn in
                    [Yy]*)suckless ;;
                    [Nn]*)return 0 ;; 
                esac
        esac
    done
}

livereload(){
    [ "$tabbed" = "true" ] && $HOME/bin/stmessage tabbed
    [ "$st" = "true" ] && $HOME/bin/stmessage st
    [ "$1" = "lake" ] || [ "$1" = "forest" ] || [ "$1" = "pywal" ] && $HOME/.config/bspwm/bspwmrc
    [ "$1" = "girl" ] && $HOME/bin/autostart
}

main () {
  case $1 in 
  lake|forest|girl|pywal)
    confirm
    checkdep
    suckless
    unstow
    stoww
    settheme "$1"
    if [ "$1" = "girl" ]; then
        cd "${pwd}"
        stow Dwm:girl -t "$HOME"
    else
        cd "${pwd}"
        stow Bspwm:"$1" -t "$HOME"
    fi
    ;;
  *) die "usage: bootstrap.sh <lake|forest|girl|pywal>"
  esac
}
main "$1"
livereload "$1"
sleep 1
clear
printf "\nDONE :)\n"




